name: Build
on:
  push:
    tags:        
      - '*'
jobs:
  build-windows-x86_64:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    defaults:
      run:
        working-directory: ./FFmpeg
    steps:
    - name: Clone FFmpeg submodule
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install compiler and FFmpeg dependencies
      run: | 
        sudo apt update
        sudo apt install cmake libass-dev libgnutls28-dev libmp3lame-dev libsdl2-dev libva-dev libvdpau-dev libvorbis-dev libxcb-xfixes0-dev meson ninja-build yasm mingw-w64 mingw-w64-tools libunistring-dev
    - name: Download prebuilt OpenSSL libraries
      uses: robinraju/release-downloader@v1.8
      with:
        repository: ${{ github.repository_owner }}/openssl
        token: ${{secrets.PUSH_TOKEN}}
        latest: true
        fileName: "openssl-*-windows-x86_64-lib.zip"
        out-file-path: FFmpeg
        extract: true
    - name: Download prebuilt libvpx libraries
      uses: robinraju/release-downloader@v1.8
      with:
        repository: ${{ github.repository_owner }}/ffmpeg-libvpx
        token: ${{secrets.PUSH_TOKEN}}
        latest: true
        fileName: "libvpx-*-windows-x86_64.zip"
        out-file-path: FFmpeg
        extract: true
    - name: Download prebuilt opus libraries
      uses: robinraju/release-downloader@v1.8
      with:
        repository: ${{ github.repository_owner }}/ffmpeg-libopus
        token: ${{secrets.PUSH_TOKEN}}
        latest: true
        fileName: "opus-*-windows-x86_64.zip"
        out-file-path: FFmpeg
        extract: true
    - name: Configure source
      run: |
        mkdir build
        ./configure --arch=x86_64 --target-os=mingw64 --cross-prefix=x86_64-w64-mingw32- --enable-cross-compile --prefix=build --disable-doc --enable-openssl --extra-cflags="-Iopenssl-windows-x86_64/include -Ilibvpx-windows-x86_64/include -Iopus-windows-x86_64/include" --extra-ldflags="-Lopenssl-windows-x86_64/lib64 -Llibvpx-windows-x86_64/lib -Lopus-windows-x86_64/lib" --enable-gpl --enable-version3 --enable-libvpx
    - name: Compile source
      run: make
    - name: Copy FFmpeg build
      run: make install
    - name: Upload build as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-windows-x86_64
        path: FFmpeg/build
  build-windows-i686-static:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    defaults:
      run:
        working-directory: ./FFmpeg
    steps:
    - name: Clone FFmpeg submodule
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install compiler and FFmpeg dependencies
      run: | 
        sudo apt update
        sudo apt install cmake libass-dev libgnutls28-dev libmp3lame-dev libsdl2-dev libva-dev libvdpau-dev libvorbis-dev libxcb-xfixes0-dev meson ninja-build yasm mingw-w64 mingw-w64-tools libunistring-dev
    - name: Download prebuilt OpenSSL binaries
      uses: robinraju/release-downloader@v1.8
      with:
        repository: ${{ github.repository_owner }}/openssl
        token: ${{secrets.PUSH_TOKEN}}
        latest: true
        fileName: "openssl-*-windows-i686-lib.zip"
        out-file-path: FFmpeg
        extract: true
    - name: Download prebuilt libvpx libraries
      uses: robinraju/release-downloader@v1.8
      with:
        repository: ${{ github.repository_owner }}/ffmpeg-libvpx
        token: ${{secrets.PUSH_TOKEN}}
        latest: true
        fileName: "libvpx-*-windows-i686.zip"
        out-file-path: FFmpeg
        extract: true
    - name: Download prebuilt opus libraries
      uses: robinraju/release-downloader@v1.8
      with:
        repository: ${{ github.repository_owner }}/ffmpeg-libopus
        token: ${{secrets.PUSH_TOKEN}}
        latest: true
        fileName: "opus-*-windows-i686.zip"
        out-file-path: FFmpeg
        extract: true
    - name: Configure source
      run: |
        mkdir build
        ./configure --arch=i686 --target-os=mingw32 --cross-prefix=i686-w64-mingw32- --enable-cross-compile --prefix=build --disable-doc --enable-openssl --extra-cflags="-Iopenssl-windows-i686/include  -Ilibvpx-windows-i686/include -Iopus-windows-i686/include" --extra-ldflags="-Lopenssl-windows-i686/lib  -Llibvpx-windows-i686/lib -Lopus-windows-i686/lib" --enable-static --disable-shared --enable-gpl --enable-version3 --enable-libvpx --enable-libopus
    - name: Compile source
      run: make
    - name: Copy FFmpeg build
      run: make install
    - name: Upload build as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-windows-i686-static
        path: FFmpeg/build
  sign-builds:
    runs-on: windows-latest
    timeout-minutes: 30
    needs: [build-windows-x86_64, build-windows-i686-static]
    steps:
    - name: Download all builds
      uses: actions/download-artifact@v3
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Install AzureSignTool
      run: dotnet tool install --global AzureSignTool
    - name: Sign Files
      run: |
        Get-ChildItem -recurse -Include **.exe, **.dll | ForEach-Object {
          $filePath = $_.FullName
          & AzureSignTool sign -kvu "${{ secrets.AZURE_CERT_KEY_VAULT }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc "${{ secrets.AZURE_CODE_SIGNING_CERT }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -tr http://timestamp.digicert.com -v $filePath
        }
    - name: Upload Windows i686 static signed build as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-windows-i686-static-signed
        path: ffmpeg-windows-i686-static
    - name: Upload Windows x86_64 signed build as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-windows-x86_64-signed
        path: ffmpeg-windows-x86_64
  create-windows-i686-static-installer-wix:
    runs-on: windows-latest
    needs: [sign-builds]
    steps:
    - name: Clone build repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
    - name: Get current version
      id: version
      run: |
        $latestTag = git describe --tags
        $current = $latestTag.Substring(1)
        echo "current=$current" >> $env:GITHUB_OUTPUT
    - name: Download Windows i686 static build
      uses: actions/download-artifact@v3
      with:
        name: ffmpeg-windows-i686-static-signed
        path: ffmpeg-windows-i686-static
    - name: Build WiX Project
      run: msbuild WiX/ffmpeg.installer.wixproj /p:Configuration=Release /p:Version=${{ steps.version.outputs.current }}
    - name: Upload installer as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-windows-i686-static-installer
        path: WiX/bin/Release
  create-windows-x86_64-nuget:
    runs-on: ubuntu-latest
    needs: [sign-builds]
    steps:
    - name: Clone build repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Get current version
      id: version
      run: echo "current=$(git describe --tags | cut -c 2-)" >> "$GITHUB_OUTPUT"
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Download Windows x86_64 build
      uses: actions/download-artifact@v3
      with:
        name: ffmpeg-windows-x86_64-signed
        path: ffmpeg-windows-x86_64
    - name: Create NuGet package
      run: |
        cd NuGet
        dotnet build --configuration release -o nuget /p:Version=${{ steps.version.outputs.current }}
    - name: Upload NuGet package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-windows-x86_64-nuget
        path: NuGet/nuget
  sign-packages:
    runs-on: windows-latest
    timeout-minutes: 30
    needs: [create-windows-i686-static-installer-wix, create-windows-x86_64-nuget]
    steps:
    - name: Download Windows i686 static installer
      uses: actions/download-artifact@v3
      with:
        name: ffmpeg-windows-i686-static-installer
        path: ffmpeg-windows-i686-static-installer
    - name: Download Windows x86_64 NuGet
      uses: actions/download-artifact@v3
      with:
        name: ffmpeg-windows-x86_64-nuget
        path: ffmpeg-windows-x86_64-nuget
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Install signing tools
      run: |
        dotnet tool install --global AzureSignTool
        dotnet tool install --global NuGetKeyVaultSignTool
    - name: Sign Files
      run: |
        Get-ChildItem -recurse -Include **.msi | ForEach-Object {
          $filePath = $_.FullName
          & AzureSignTool sign -kvu "${{ secrets.AZURE_CERT_KEY_VAULT }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc "${{ secrets.AZURE_CODE_SIGNING_CERT }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -tr http://timestamp.digicert.com -v $filePath
        }
        Get-ChildItem -recurse -Include **.nupkg | ForEach-Object {
          $filePath = $_.FullName
          & NuGetKeyVaultSignTool sign --file-digest sha256 --timestamp-digest sha256 --azure-key-vault-url "${{ secrets.AZURE_CERT_KEY_VAULT }}" --azure-key-vault-client-id "${{ secrets.AZURE_CLIENT_ID }}" --azure-key-vault-client-secret "${{ secrets.AZURE_CLIENT_SECRET }}" --azure-key-vault-certificate "${{ secrets.AZURE_CODE_SIGNING_CERT }}" --azure-key-vault-tenant-id "${{ secrets.AZURE_TENANT_ID }}" --timestamp-rfc3161 http://timestamp.digicert.com $filePath
        }

    - name: Upload Windows i686 static signed installer as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-windows-i686-static-installer-signed
        path: ffmpeg-windows-i686-static-installer
    - name: Upload Windows x86_64 signed NuGet package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-windows-x86_64-nuget-signed
        path: ffmpeg-windows-x86_64-nuget
  create-release:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    needs: [sign-packages]
    timeout-minutes: 30
    steps:
    - name: Clone build repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Get current version
      id: version
      run: echo "current=$(git describe --tags | cut -c 2-)" >> "$GITHUB_OUTPUT"
    - name: Download Windows x86_64 build
      uses: actions/download-artifact@v3
      with:
        name: ffmpeg-windows-x86_64-signed
        path: ffmpeg-windows-x86_64
    - name: Download Windows i686 static build
      uses: actions/download-artifact@v3
      with:
        name: ffmpeg-windows-i686-static-signed
        path: ffmpeg-windows-i686-static
    - name: Download Windows i686 static installer
      uses: actions/download-artifact@v3
      with:
        name: ffmpeg-windows-i686-static-installer-signed
        path: ffmpeg-windows-i686-static-installer
    - name: Download Windows x86_64 NuGet package
      uses: actions/download-artifact@v3
      with:
        name: ffmpeg-windows-x86_64-nuget-signed
        path: ffmpeg-windows-x86_64-nuget
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Push NuGet package
      run: |
        cd NuGet
        dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        dotnet nuget push ../ffmpeg-windows-x86_64-nuget/ffmpeg.*.nupkg --no-symbols --skip-duplicate --api-key $NUGET_AUTH_TOKEN --source "github"
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Package FFmpeg for release
      run: |
        zip -r -j ffmpeg-${{ steps.version.outputs.current }}-windows-x86_64.zip ffmpeg-windows-x86_64/bin
        zip -r ffmpeg-${{ steps.version.outputs.current }}-windows-x86_64-lib.zip ffmpeg-windows-x86_64
        zip -r -j ffmpeg-${{ steps.version.outputs.current }}-windows-i686-static.zip ffmpeg-windows-i686-static/bin
        zip -r ffmpeg-${{ steps.version.outputs.current }}-windows-i686-static-lib.zip ffmpeg-windows-i686-static
        mv ffmpeg-windows-i686-static-installer/ffmpeg_installer.msi ffmpeg-${{ steps.version.outputs.current }}-windows-i686-static-installer.msi
    - name: Create GitHub release with packages
      uses: softprops/action-gh-release@v1
      with:
        files: |
          NuGet/nuget/ffmpeg.*.nupkg
          ffmpeg-${{ steps.version.outputs.current }}-windows-x86_64.zip
          ffmpeg-${{ steps.version.outputs.current }}-windows-x86_64-lib.zip
          ffmpeg-${{ steps.version.outputs.current }}-windows-i686-static.zip
          ffmpeg-${{ steps.version.outputs.current }}-windows-i686-static-lib.zip
          ffmpeg-${{ steps.version.outputs.current }}-windows-i686-static-installer.msi
